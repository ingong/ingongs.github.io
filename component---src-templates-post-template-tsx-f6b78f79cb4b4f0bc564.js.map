{"version":3,"file":"component---src-templates-post-template-tsx-f6b78f79cb4b4f0bc564.js","mappings":"6NASA,IAAMA,GAAsB,cAAH,oBAAG,CAAH,wMAgBnBC,GAAQ,cAAH,oBAAG,CAAH,4QAiBLC,GAAW,cAAH,oBAAG,CAAH,qTAiCd,EAZ2D,YAGxD,IAFDC,EAEC,EAFDA,MACAC,EACC,EADDA,KAEA,OACE,QAACJ,EAAD,MACE,QAACC,EAAD,KAAQE,IACR,QAACD,EAAD,KAAWE,K,UC5DjB,IAAMC,GAAkB,cAAH,oBAAG,CAAH,wJA+BrB,EAdmD,YAIhD,IAHDF,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAE,EACC,EADDA,WAEMC,EAVc,SAACH,GACrB,IAAMI,EAAU,IAAIC,KAAKL,GAEzB,OADoBI,EAAQE,eAAe,QAAS,CAAEC,MAAO,SAC7D,IAAyBH,EAAQI,UAAjC,IAA8CJ,EAAQK,cAOnCC,CAAcV,GACjC,OACE,QAACC,EAAD,MACE,QAACU,EAAA,EAAD,OACA,QAAC,EAAD,CAAcZ,MAAOA,EAAOC,KAAMG,EAAYD,WAAYA,MC7BhE,IAAMU,GAAmB,cAAH,oBAAG,CAAH,4rDAiKtB,EAJyD,YAAoB,IAARC,EAAQ,EAARA,KACnE,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MClK9D,IAaMG,GAAiB,wGAMjBC,EAAuC,CAC3CC,IApBU,gCAqBVC,KApBW,0BAqBX,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAqBT,EAlByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAchB,OAZAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAE7DC,OAAOC,QAAQf,GAAYgB,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDP,EAAWQ,aAAaF,EAAKC,MAG/BX,EAAQG,QAAQU,YAAYT,MAC3B,KAEI,QAACZ,EAAD,CAAmBsB,IAAKd,KCQjC,EApC2D,YAKvD,IAHqBe,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAcIH,EAAM,GAbRK,KACE/B,EAFJ,EAEIA,KAFJ,IAGIgC,YACE9C,EAJN,EAIMA,MACA+C,EALN,EAKMA,QACA9C,EANN,EAMMA,KACAE,EAPN,EAOMA,WAPN,IAQM6C,UACqBC,EAT3B,EASQC,gBAAmBD,gBACnBE,EAVR,EAUQA,UAMR,OACE,QAACC,EAAA,EAAD,CAAUpD,MAAOA,EAAOqD,YAAaN,EAASO,IAAKX,EAAMY,MAAOJ,IAC9D,QAAC,EAAD,CACEnD,MAAOA,EACPC,KAAMA,EACNE,WAAYA,EACZ6C,UAAWC,KAEb,QAAC,EAAD,CAAanC,KAAMA,KACnB,QAAC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\n\nexport type PostHeadInfoProps = {\n  title: string;\n  date: string;\n  categories: string[];\n};\n\nconst PostHeadInfoWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 700px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n  color: #000;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`;\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`;\n\nconst PostData = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 25px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 15px;\n  font-weight: 400;\n  color: #7d7d7d;\n  font-style: italic;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`;\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n}) {\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>{date}</PostData>\n    </PostHeadInfoWrapper>\n  );\n};\n\nexport default PostHeadInfo;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo';\nimport Introduction from 'components/Main/Introduction';\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData;\n};\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 210px;\n\n  @media (max-width: 768px) {\n    height: 200px;\n  }\n`;\n\nconst getDateString = (date: string) => {\n  const DateObj = new Date(date);\n  const MonthString = DateObj.toLocaleString('en-US', { month: 'long' });\n  return `${MonthString} ${DateObj.getDate()},${DateObj.getFullYear()}`;\n};\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  const DateString = getDateString(date);\n  return (\n    <PostHeadWrapper>\n      <Introduction />\n      <PostHeadInfo title={title} date={DateString} categories={categories} />\n    </PostHeadWrapper>\n  );\n};\n\nexport default PostHead;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\n\ninterface PostContentProps {\n  html: string;\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  font-family: 'Noto Sans KR', sans-serif;\n  font: 100%/1.625 -apple-system, 'BlinkMacSystemFont', 'Segoe UI', 'Roboto',\n    'Helvetica', 'Arial', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\n    'Segoe UI Symbol';\n  display: flex;\n  flex-direction: column;\n  width: 700px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 26px;\n  font-size: 16px;\n  font-weight: 400;\n\n  h2 {\n    font-weight: 800;\n    margin-top: 40px;\n    margin-bottom: 20px;\n    font-size: 26px;\n  }\n\n  h3 {\n    font-weight: 700;\n    margin-top: 20px;\n    margin-bottom: 8px;\n    font-size: 23px;\n  }\n\n  h4 {\n    font-weight: 600;\n    margin-top: 20px;\n    margin-bottom: 8px;\n    font-size: 20px;\n  }\n\n  img {\n    margin-top: 15px;\n  }\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 15px 0;\n    padding: 5px 5px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n    line-height: 26px;\n    font-size: 16px;\n    font-weight: 500;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    line-height: 26px;\n    font-size: 16px;\n    font-weight: 500;\n  }\n\n  // markDown Style\n  li {\n    line-height: 26px;\n    margin: 0;\n    padding: 2px;\n    line-height: 26px;\n    font-size: 16px;\n    font-weight: 550;\n  }\n\n  p {\n    font-weight: 550;\n    font-size: 16px;\n    line-height: 26px;\n    padding: 5px 0;\n    text-align: justify;\n    text-indent: 8px;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n    line-height: 26px;\n    font-size: 16px;\n    font-weight: 500;\n  }\n\n  // Adjust Link Element Style\n  a {\n    text-decoration: none;\n    line-height: 26px;\n    font-size: 16px;\n    font-weight: 500;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 0 auto;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'] {\n    tab-size: 2;\n    line-height: 16px;\n    text-align: center;\n    font-size: 16px;\n    font-weight: 500;\n    margin: 0 auto;\n    padding-left: 5px;\n  }\n\n  pre[class*='language-'] {\n    tab-size: 2;\n    line-height: 16px;\n    font-size: 16px;\n    font-weight: 500;\n    margin: 0 auto;\n    margin-bottom: 30px;\n    border-radius: 8px;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`;\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default PostContent;\n","import React, { createRef, FunctionComponent, useEffect } from 'react';\nimport styled from '@emotion/styled';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'ingong/ingong.github.io';\n\ntype UtterancesAttributesType = {\n  src: string;\n  repo: string;\n  'issue-term': string;\n  label: string;\n  theme: string;\n  crossorigin: string;\n  async: string;\n};\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`;\n\nconst attributes: UtterancesAttributesType = {\n  src,\n  repo,\n  'issue-term': 'pathname',\n  label: 'Comment',\n  theme: 'github-light',\n  crossorigin: 'anonymous',\n  async: 'true',\n};\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (element.current === null) return;\n\n    const utterances: HTMLScriptElement = document.createElement('script');\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    element.current.appendChild(utterances);\n  }, []);\n\n  return <UtterancesWrapper ref={element} />;\n};\n\nexport default CommentWidget;\n","import React, { FunctionComponent } from 'react';\nimport { graphql } from 'gatsby';\nimport { PostPageItemType } from 'types/PostItem.types';\nimport Template from 'components/Common/Template';\nimport PostHead from 'components/Post/PostHead';\nimport PostContent from 'components/Post/PostContent';\nimport CommentWidget from 'components/Post/CommentWidget';\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[];\n    };\n  };\n  location: {\n    href: string;\n  };\n};\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  );\n};\n\nexport default PostTemplate;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostHeadInfoWrapper","Title","PostData","title","date","PostHeadWrapper","categories","DateString","DateObj","Date","toLocaleString","month","getDate","getFullYear","getDateString","Introduction","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","attributes","src","repo","label","theme","crossorigin","async","element","createRef","useEffect","current","utterances","document","createElement","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","thumbnail","gatsbyImageData","childImageSharp","publicURL","Template","description","url","image"],"sourceRoot":""}