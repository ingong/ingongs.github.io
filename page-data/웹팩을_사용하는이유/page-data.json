{
    "componentChunkName": "component---src-templates-post-template-tsx",
    "path": "/웹팩을_사용하는이유/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>이번 포스트에서는 우리 팀이 왜 CRA 를 사용하지 않고 Webpack 을 사용했는지에 대한 이유와 Webpack 의 주요 속성에 대해서 이야기해보려한다.</p>\n<h3>TL;DR</h3>\n<ul>\n<li>Webpack 은 효율적인 모듈 시스템 활용과 코드 스플리팅을 통한 로딩 성능 향상을 위해 사용된다.</li>\n<li>Webpack 은 웹 개발 작업을 자동화할 수 있는 도구이다.</li>\n</ul>\n<h2>Webpack</h2>\n<div align=\"center\">\n<img src=\"https://w.namu.la/s/cff859aa600201bd726c9c550f0d147077bda195be1c22e51df2ab812d1089b0868997e25b2626949461b9974a3ec9f804fe3798caa9244c0466ca9ac35c98a104a25c3aecf4df4940883d2abdabca89af52e9f8a5a2071589610c25526af41b7535da1e4ac9191423e5a2db72a668eb\" width=\"600\">\n</div>\n<br>\n<br>\n<h3>Webpack 을 사용한 이유</h3>\n<p>Webpack 은 JS 모듈 번들러이기 때문에 현 FE 생태계에서 사용하지 않는 것은 불가능하다. 물론 CRA 도 웹팩 기반이기 때문에 CRA 를 써도 웹팩을 사용하는 것이다.\n우리 팀은 따라서 당연히 사용하는 것이 아니라 왜 우리가 웹팩을 써야하는지 조사하고 정리해보았다. 그 이유는 크게 3가지로 요약된다.</p>\n<ul>\n<li>효율적인 모듈 시스템 활용</li>\n<li>코드 스플리팅을 통한 로딩 성능 향상</li>\n<li>여러 로더를 통해 하나의 파일 또는 여러 개의 묶음 파일로 만드는 과정을 통해 웹 브라우저가 서버로 요청하는 파일의 갯수 감소</li>\n<li>웹팩에서 BundleAnalyzerPlugin 을 활용해서 번들 사이즈 측정</li>\n</ul>\n<p>다음으로는 Webpack 의 주요 속성에 대해서 알아보자.\n<br/>\n<br/></p>\n<h3>Webpack 의 4가지 주요 속성</h3>\n<p>웹팩의 빌드 과정을 이해하기 위해서는 아래 4가지 주요 속성에 대해 알고 있어야한다.</p>\n<h4>1) entry</h4>\n<p><code class=\"language-text\">entry</code> 속성은 웹팩에서 웹 자원을 변환하기 위해 필요한 최초 진입점이자 자바스크립트 파일 경로이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>웹팩을 실행했을 때 src 폴더 내의 index.js 를 대상으로 빌드를 수행하겠다고 웹팩에게 알려주는 것이다. 엔트리 포인트는 1개 일수도, 여러 개일 수도 있다. 엔트리 포인트를 분리하는 경우에는 싱글페이지 어플리케이션이 아닌 특정 페이지 진입 시 서버에서 해당 정보를 받는 멀티 페이지 어플리케이션에 적합하다.</p>\n<h4>2) output</h4>\n<p><code class=\"language-text\">output</code> 속성은 웹팩을 돌리고 난 결과물의 파일 경로를 의미한다.\nfilename 을 지정해야하며, 일반적으로 <code class=\"language-text\">output</code> 이 만들어진 경로와 함께 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>3) loader</h4>\n<p>웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌 웹 자원들을 변환할 수 있도록 도와주는 속성이다. 로더는 파일을 해석하고 변환하는 과정에 관여한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>module 이라는 이름을 사용하며, 사용할 loader 를 rules 라는 배열에 추가하는 형식으로 활용한다.\n다음은 우리팀이 작성한 webpack loader 설정 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(ts|tsx)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jp(e)g|gif|svg)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'asset/resource'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(woff|woff2|eot|ttf|otf)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span>\n        parser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          dataUrlCondition<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            maxSize<span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>사용한 3가지 loader 에 대해서 간단하게 설명해보겠다.</p>\n<ol>\n<li>babel-loader <br />\nts 와 tsx 는 babel-loader 를 통해 transpile 과 polyfill 된다. 따라서 ts-loader 를 별도로 사용하지 않고, babel-loader 만 사용했다.\n<br/>\n<br/></li>\n<li>asset/resource <br />\nwebpack 5 이전에는 raw-loader, url-loader, file-loader 를 사용했지만 webpack 5 부터는 새로운 모듈 유형이 추가됐다. 관련한 설명은 webpack 의 asset-modules 공식 문서를 통해서 자세하게 학습할 수 있다. asset/resource 는 별도의 파일을 내보내고 URL 을 추출하는 모듈이다. 이전에는 file-loader 를 사용하여 처리할 수 있었다.\n<br/>\n<br/></li>\n<li>asset <br />\nlocal-font 를 사용하기 때문에 글꼴에 대한 처리도 해주어야했다. asset 모듈은 data URI와 별도의 파일 내보내기 중에서 자동으로 선택한다. 우리가 준 maxSize 속성은 8KB 기준이며 그 크기가 넘어가지 않는다면 asset/inline 모듈을 사용한다.\n<br/></li>\n</ol>\n<h4>4) plugin</h4>\n<p>plugin은 웹팩의 기본적인 동작에 추가적인 기능을 제공하는 속성이다. 빌드한 결과물의 형태를 바꾸는 역할을 한다고 보면 된다.\nplugin은 다음과 같이 선언한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리팀이 설정한 Webpack plugin 속성은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BundleAnalyzerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-bundle-analyzer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>BundleAnalyzerPlugin<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\nplugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      template<span class=\"token operator\">:</span> <span class=\"token string\">'./public/index.html'</span><span class=\"token punctuation\">,</span>\n      minify<span class=\"token operator\">:</span>\n        process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span>\n          <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n              collapseWhitespace<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n              removeComments<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">BundleAnalyzerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li>HtmlWebpackPlugin <br/>\n웹팩으로 빌드한 결과물로 HTML 파일을 생성해주는 플러그인이다.</li>\n<li>BundleAnalyzerPlugin <br/>\n빌드할 경우에 BundleSize 를 가시적으로 보여주는 플러그인이다.\n아직 개발환경설정 단계라 JS 번들 사이즈를 줄일 것이 없지만 이후에 해당 플러그인을 활용해 번들사이즈를 줄여볼 예정이다.</li>\n</ul>\n<h2>마무리</h2>\n<p>Webpack 을 사용하는 이유와 주요 속성에 대해서 정리해보았다. 이외에도 별칭 설정과데 개발 환경에서 사용할 Webpack devserver 도 설정했는데 별도로 다루지는 않았다. 해당 내용은 웹팩 핸드북이나 웹팩 공식 문서에 잘 나와있으니 참고하면 좋을 것 같다.</p>\n<p>웹팩은 기본적으로 코드 스플리팅을 통한 로딩 성능향상을 지원한다. React 에서는 lazy 라는 키워드만 활용한다면 해당 하는 컴포넌트와 페이지를 lazy 하게 import 할 수도 있다. 이를 통해서 사용자가 처음 진입하는 페이지에서의 번들 사이즈를 줄이고, 좀 더 빠른 로딩 속도를 기대할 수 있다.</p>","frontmatter":{"title":"웹팩은 왜 사용하는가","summary":"이번 프로젝트에서 우리 팀은 CRA 없이 밑바닥부터 Webpack 과 Babel 을 설정하면서 프로젝트를 구성하였다. 스프린트 때부터 웹팩을 하나씩 설정하면서 프로젝트를 진행했었고, 현업에 갔을 때 웹팩 설정을 따로 할일은 없다고 이야기를 들었지만, 우리가 원하는 최적화를 진행하려면 우리가 설정한 결과를 이해할 필요가 있다고 판단했다.","date":"2021.11.02.","categories":["개발환경"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d7f738a87cd2e8d6afe7a9806f704187/ba9d9/test.png","srcSet":"/static/d7f738a87cd2e8d6afe7a9806f704187/1f45a/test.png 120w,\n/static/d7f738a87cd2e8d6afe7a9806f704187/f9aa0/test.png 240w,\n/static/d7f738a87cd2e8d6afe7a9806f704187/ba9d9/test.png 479w","sizes":"(min-width: 479px) 479px, 100vw"},"sources":[{"srcSet":"/static/d7f738a87cd2e8d6afe7a9806f704187/a884e/test.webp 120w,\n/static/d7f738a87cd2e8d6afe7a9806f704187/1235d/test.webp 240w,\n/static/d7f738a87cd2e8d6afe7a9806f704187/75872/test.webp 479w","type":"image/webp","sizes":"(min-width: 479px) 479px, 100vw"}]},"width":479,"height":400.99999999999994}},"publicURL":"/static/d7f738a87cd2e8d6afe7a9806f704187/test.png"}}}}]}},"pageContext":{"slug":"/웹팩을_사용하는이유/"}},
    "staticQueryHashes": []}